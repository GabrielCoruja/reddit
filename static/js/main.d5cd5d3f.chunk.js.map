{"version":3,"sources":["context/context.jsx","services/redditAPI.jsx","components/SelectPost.jsx","components/Posts.jsx","App.js","serviceWorker.js","context/Provider.jsx","index.js"],"names":["context","createContext","subredditAPI","action","type","fetch","then","response","json","data","children","SelectPost","useContext","subreddit","setSubreddit","pageRefresh","setSelectedValue","selectedValue","setDate","date","useEffect","Date","toLocaleTimeString","post","data-testId","onClick","Posts","isFetching","map","posts","key","title","App","className","Boolean","window","location","hostname","match","Provider","useState","setIsFetching","refreshAPI","String","storeContext","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4IAIeA,G,KAFCC,2BCGDC,EALM,SAACC,EAAQC,GAAT,OACnBC,MAAM,4BAAD,OAA6BD,EAA7B,UACFE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUN,EAAOM,EAAKA,KAAKC,cCkCtBC,EAjCI,WAAO,IAAD,EASnBC,qBAAWZ,GAPba,EAFqB,EAErBA,UACAC,EAHqB,EAGrBA,aACAC,EAJqB,EAIrBA,YACAC,EALqB,EAKrBA,iBACAC,EANqB,EAMrBA,cACAC,EAPqB,EAOrBA,QACAC,EARqB,EAQrBA,KAGFC,qBAAU,WACRlB,EAAaY,EAAc,WAC3BI,GAAQ,IAAIG,MAAOC,wBAClB,IAEH,IAAIC,EAAON,EAMX,OALIJ,IACFU,EAAOV,EAAU,GAAGJ,KAAKI,WAE3BG,EAAiBO,GAGf,6BACE,yCAAgBA,EAAhB,KACA,uBAAGC,cAAY,QAASL,GACxB,4BAAQM,QAAS,WAAOvB,EAAaY,EAAc,cAAnD,YACA,4BAAQW,QAAS,WAAOvB,EAAaY,EAAc,aAAnD,WACA,4BAAQW,QAAS,kBAAMV,MAAvB,aClBSW,EAXD,WAAO,IAAD,EACgBd,qBAAWZ,GAArCa,EADU,EACVA,UAAWc,EADD,EACCA,WAEnB,OAAKd,GAAac,EAAmB,4CAEnC,6BACGd,EAAUe,KAAI,SAACC,GAAD,OAAW,uBAAGC,IAAKD,EAAMpB,KAAKsB,OAAQF,EAAMpB,KAAKsB,YCKvDC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCqBSC,EAjCE,SAAC,GAAkB,IAAhB7B,EAAe,EAAfA,SAAe,EACC8B,qBADD,mBAC1B3B,EAD0B,KACfC,EADe,OAEG0B,oBAAS,GAFZ,mBAE1Bb,EAF0B,KAEdc,EAFc,OAGSD,mBAAS,WAHlB,mBAG1BvB,EAH0B,KAGXD,EAHW,OAITwB,qBAJS,mBAI1BrB,EAJ0B,KAIpBD,EAJoB,KAY3BwB,EAAa,WACjBxC,EAAaY,EAAcG,GAC3BwB,GAAc,GACdvB,EAAQyB,QAAO,IAAItB,MAAOC,wBAGtBsB,EAAe,CACnB/B,YACAC,eACAa,aACAc,gBACA1B,YAjBkB,WAClB0B,GAAc,GACd3B,EAAa,IACb4B,KAeAzB,gBACAD,mBACAG,OACAD,WAGF,OAAO,kBAAC,EAAQqB,SAAT,CAAkBM,MAAOD,GAAelC,IC9BjDoC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d5cd5d3f.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst context = createContext();\n\nexport default context;\n","const subredditAPI = (action, type) =>\n  fetch(`https://www.reddit.com/r/${type}.json`)\n    .then((response) => response.json())\n    .then((data) => action(data.data.children));\n\nexport default subredditAPI;\n","import React, { useContext, useEffect } from 'react';\nimport context from '../context/context';\nimport subredditAPI from '../services/redditAPI';\n\nconst SelectPost = () => {\n  const {\n    subreddit,\n    setSubreddit,\n    pageRefresh,\n    setSelectedValue,\n    selectedValue,\n    setDate,\n    date,\n  } = useContext(context);\n  \n  useEffect(() => {\n    subredditAPI(setSubreddit, 'reactjs');\n    setDate(new Date().toLocaleTimeString());\n  }, []);\n  \n  let post = selectedValue;\n  if (subreddit) {\n    post = subreddit[0].data.subreddit\n  }\n  setSelectedValue(post);\n  \n  return (\n    <div>\n      <h1>Selected: { post } </h1>\n      <p data-testId=\"data\">{ date }</p>\n      <button onClick={() => {subredditAPI(setSubreddit, 'frontend')}}>frontend</button>\n      <button onClick={() => {subredditAPI(setSubreddit, 'reactjs')}}>reactjs</button>\n      <button onClick={() => pageRefresh()}>refresh</button>\n    </div>\n  );\n};\n\nexport default SelectPost;\n","import React, { useContext } from 'react';\nimport context from '../context/context';\n\nconst Posts = () => {\n  const { subreddit, isFetching } = useContext(context);\n\n  if (!subreddit || isFetching) return <div> Loading...</div>\n  return (\n    <div>\n      {subreddit.map((posts) => <p key={posts.data.title}>{posts.data.title}</p>)}\n    </div>\n  );\n};\n\nexport default Posts;\n","import React from 'react';\nimport './App.css';\nimport SelectPost from './components/SelectPost';\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SelectPost />\n      <Posts />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport context from './context';\nimport subredditAPI from '../services/redditAPI';\n\nconst Provider = ({ children }) => {\n  const [subreddit, setSubreddit] = useState();\n  const [isFetching, setIsFetching] = useState(false);\n  const [selectedValue, setSelectedValue] = useState('reactjs');\n  const [date, setDate] = useState();\n\n  const pageRefresh = () => {\n    setIsFetching(true);\n    setSubreddit('');\n    refreshAPI();\n  };\n\n  const refreshAPI = () => {\n    subredditAPI(setSubreddit, selectedValue);\n    setIsFetching(false);\n    setDate(String(new Date().toLocaleTimeString()));\n  }\n\n  const storeContext = {\n    subreddit,\n    setSubreddit,\n    isFetching,\n    setIsFetching,\n    pageRefresh,\n    selectedValue,\n    setSelectedValue,\n    date,\n    setDate,\n  };\n\n  return <context.Provider value={storeContext}>{children}</context.Provider>;\n}\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from './context/Provider';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}